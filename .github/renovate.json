{
  "extends": [
    ":preserveSemverRanges",
    "config:base",
    "docker:enableMajor",
    "helpers:pinGitHubActionDigests"
  ],
  "printConfig": true,
  "prHourlyLimit": 0,
  "onboarding": false,
  "requireConfig": "optional",
  "cloneSubmodules": true,
  "rebaseWhen": "behind-base-branch",
  "allowPostUpgradeCommandTemplating": true,
  "allowedPostUpgradeCommands": [
    "^npm"
  ],
  "git-submodules": {
    "enabled": true
  },
  "labels": [
    "renovate",
    "dependencies",
    "{{updateType}}",
    "{{depType}}"
  ],
  "commitMessageExtra": "to {{{replace 'v' '' newVersion}}}",
  "commitBody": "Update {{depName}} to {{{replace 'v' '' newVersion}}}\n\nUpdate {{depName}} from {{{replace 'v' '' currentVersion}}} to {{{replace 'v' '' newVersion}}}\n\nChange-type: {{#if (or isPatch (containsString depType 'devDependencies'))}}patch{{else}}minor{{/if}}",
  "prConcurrentLimit": 2,
  "branchConcurrentLimit": 2,
  "ignorePaths": [
    "**/node_modules/**",
    "**/bower_components/**",
    "**/vendor/**",
    "**/examples/**",
    "**/__tests__/**",
    "**/test/**",
    "**/tests/suites/**",
    "**/__fixtures__/**",
    "**/Dockerfile.template"
  ],
  "repositories": [
    "product-os/autumndb",
    "product-os/balena-cloudwatch-exporter",
    "product-os/balena-jenkins",
    "product-os/balena-redis-exporter",
    "product-os/balena-versionist",
    "product-os/flowzone",
    "product-os/hubot",
    "product-os/jellyfish",
    "product-os/jellyfish-assert",
    "product-os/jellyfish-client-sdk",
    "product-os/jellyfish-environment",
    "product-os/jellyfish-jellyscript",
    "product-os/jellyfish-logger",
    "product-os/jellyfish-metrics",
    "product-os/jellyfish-plugin-balena-api",
    "product-os/jellyfish-plugin-discourse",
    "product-os/jellyfish-plugin-feedback",
    "product-os/jellyfish-plugin-front",
    "product-os/jellyfish-plugin-github",
    "product-os/jellyfish-plugin-hubot",
    "product-os/jellyfish-plugin-incidents",
    "product-os/jellyfish-plugin-outreach",
    "product-os/jellyfish-plugin-typeform",
    "product-os/jellyfish-worker",
    "product-os/renovate-config",
    "product-os/resinci-deploy",
    "product-os/versionbot"
  ],
  "packageRules": [
    {
      "automerge": true,
      "platformAutomerge": true,
      "matchUpdateTypes": [
        "minor",
        "patch",
        "digest"
      ]
    },
    {
      "matchDepTypes": [
        "devDependencies"
      ],
      "automerge": true,
      "platformAutomerge": true
    },
    {
      "matchManagers": [
        "git-submodules"
      ],
      "automerge": true,
      "platformAutomerge": true,
      "matchUpdateTypes": [
        "minor",
        "patch",
        "digest"
      ]
    }
  ],
  "regexManagers": [
    {
      "fileMatch": [
        "(^|\\/)Dockerfile(\\.[:alnum:]+)?$"
      ],
      "matchStrings": [
        "ENV PROMETHEUS_VERSION[= ]v?(?<currentValue>.*?)\\n",
        "ARG PROMETHEUS_VERSION[= ]v?(?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "prometheus/prometheus",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.*)$"
    },
    {
      "fileMatch": [
        "(^|\\/)Dockerfile(\\.[:alnum:]+)?$"
      ],
      "matchStrings": [
        "ENV GRAFANA_VERSION[= ]v?(?<currentValue>.*?)\\n",
        "ARG GRAFANA_VERSION[= ]v?(?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "grafana/grafana",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.*)$"
    },
    {
      "fileMatch": [
        "(^|\\/)Dockerfile(\\.[:alnum:]+)?$"
      ],
      "matchStrings": [
        "ENV NODE_VERSION[= ](?<currentValue>.*?)\\n",
        "ARG NODE_VERSION[= ](?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "node",
      "datasourceTemplate": "node"
    },
    {
      "fileMatch": [
        "(^|\\/)Dockerfile(\\.[[:alnum:]]+)?$"
      ],
      "matchStrings": [
        "ENV NPM_VERSION[= ](?<currentValue>.*?)\\n",
        "ARG NPM_VERSION[= ](?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "npm",
      "datasourceTemplate": "npm"
    },
    {
      "fileMatch": [
        "(^|\\/)(?:docker-)?compose[^/]*\\.ya?ml$",
        "(^|\\/)Dockerfile(\\.[[:alnum:]]+)?$"
      ],
      "matchStrings": [
        "image: (?<depName>.*[^\\/])\\/(?<currentValue>.*?)\\n",
        "FROM (?<depName>.*[^\\/])\\/(?<currentValue>.*?)\\n"
      ],
      "datasourceTemplate": "docker"
    }
  ]
}
